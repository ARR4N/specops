// Package specialops implements a DSL for crafting raw EVM bytecode. It
// provides "special" opcodes as drop-in replacements for regular ones, e.g.
// JUMPDEST labels, PUSH<N> aliases, and DUP/SWAP from the bottom of the stack.
// It also provides pseudo opcodes that act as compiler hints.
//
// It is designed to be dot-imported such that all exported identifiers are
// available in the importing package, allowing a mnemonic-style programming
// environment akin to writing assembly. As a result, there are few top-level
// identifiers.
package specialops

import (
	"encoding/binary"
	"fmt"
	"math/bits"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/holiman/uint256"
)

// Code is a slice of Bytecoders; it is itself a Bytecoder, allowing for
// nesting.
type Code []Bytecoder

// Bytecode always returns an error; use Code.Compile instead(), which flattens
// nested Code instances.
func (c Code) Bytecode() ([]byte, error) {
	return nil, fmt.Errorf("call to %T.Bytecode()", c)
}

// Bytecoders returns the Code as a slice of Bytecoders.
func (c Code) Bytecoders() []Bytecoder {
	return []Bytecoder(c)
}

// A Bytecoder returns raw EVM bytecode. If the returned bytecode is the
// concatenation of multiple Bytecoder outputs, the type MUST also implement
// BytecodeHolder.
type Bytecoder interface {
	Bytecode() ([]byte, error)
}

// A BytecodeHolder is a concatenation of Bytecoders.
type BytecodeHolder interface {
	Bytecoder
	Bytecoders() []Bytecoder
}

// Fn returns a Bytecoder that returns the concatenation of the *reverse* of
// bcs. This allows for a more human-readable syntax akin to a function call
// (hence the name). Fn is similar to Yul except that "return" values are left
// on the stack to be used by later Fn()s (or raw bytecode).
//
// Although the returned BytecodeHolder can contain JUMPDESTs, they're hard to
// reason about so should be used with care.
func Fn(bcs ...Bytecoder) BytecodeHolder {
	c := Code(bcs)
	for i, n := 0, len(c); i < n/2; i++ {
		j := n - i - 1
		c[i], c[j] = c[j], c[i]
	}
	return c
}

// An opCode is a regular Ethereum vm.OpCode. It isn't exported so as to limit
// the set raw opcodes that can be used. The constants are generated by the
// opcopy binary.
type opCode vm.OpCode

func (o opCode) Bytecode() ([]byte, error) {
	return []byte{byte(o)}, nil
}

func (o opCode) String() string {
	return vm.OpCode(o).String()
}

// A JUMPDEST is a Bytecoder that always returns vm.JUMPDEST while also storing
// its location in the bytecode for use via a PUSHJUMPDEST or
// PUSH[string|JUMPDEST](<lbl>).
type JUMPDEST string

// Bytecode returns []byte{vm.JUMPDEST}.
func (j JUMPDEST) Bytecode() ([]byte, error) {
	return []byte{byte(vm.JUMPDEST)}, nil
}

// PUSHJUMPDEST pushes the bytecode location of the respective JUMPDEST.
type PUSHJUMPDEST string

// Bytecode always returns an error as PUSHJUMPDEST values have special handling
// inside Code.Compile().
func (p PUSHJUMPDEST) Bytecode() ([]byte, error) {
	return nil, fmt.Errorf("direct call to %T.Bytecode()", p)
}

// A StackPusher returns [1,32] bytes to be pushed to the stack.
type StackPusher interface {
	ToPush() []byte
}

// BytecoderFromStackPusher returns a Bytecoder that calls s.ToPush() and
// prepends the appropriate PUSH<N> opcode to the returned bytecode.
func BytecoderFromStackPusher(s StackPusher) Bytecoder {
	return pusher{s}
}

type pusher struct {
	StackPusher
}

func (p pusher) Bytecode() ([]byte, error) {
	buf := p.ToPush()
	n := len(buf)
	if n == 0 || n > 32 {
		return nil, fmt.Errorf("len(%T.ToPush()) == %d must be in [1,32]", p.StackPusher, n)
	}

	size := n
	for _, b := range buf {
		if b == 0 {
			size--
		} else {
			break
		}
	}
	if size == 0 {
		return []byte{byte(vm.PUSH0)}, nil
	}

	return append(
		// PUSH0 to PUSH32 are contiguous, so we can perform arithmetic on them.
		[]byte{byte(vm.PUSH0 + vm.OpCode(size))},
		buf[n-size:]...,
	), nil
}

// PUSHSelector returns a PUSH4 Bytecoder that pushes the selector of the
// signature, i.e. `sha3(sig)[:4]`.
func PUSHSelector(sig string) Bytecoder {
	return PUSH(crypto.Keccak256([]byte(sig))[:4])
}

// PUSHBytes accepts [1,32] bytes, returning a PUSH<x> Bytecoder where x is the
// smallest number of bytes (possibly zero) that can represent the concatenated
// values; i.e. x = len(bs) - leadingZeros(bs).
func PUSHBytes(bs ...byte) Bytecoder {
	return BytecoderFromStackPusher(bytesPusher(bs))
}

type bytesPusher []byte

func (p bytesPusher) ToPush() []byte { return []byte(p) }

// PUSH returns a PUSH<n> Bytecoder appropriate for the type. It panics if v is
// negative. A string is equivalent to PUSHJUMPDEST(v).
func PUSH[P interface {
	int | uint64 | common.Address | uint256.Int | byte | []byte | JUMPDEST | string
}](v P,
) Bytecoder {
	pToB := BytecoderFromStackPusher

	switch v := any(v).(type) {
	case int:
		if v < 0 {
			panic(fmt.Sprintf("PUSH() negative value %d", v))
		}
		return pToB(uint64Pusher(uint64(v)))

	case uint64:
		return pToB(uint64Pusher(v))

	case byte:
		return PUSHBytes(v)

	case []byte:
		return PUSHBytes(v...)

	case common.Address:
		return pToB(addressPusher(v))

	case uint256.Int:
		return pToB(wordPusher(v))

	case string:
		return PUSHJUMPDEST(v)

	case JUMPDEST:
		return PUSHJUMPDEST(v)

	default:
		panic(fmt.Sprintf("no type-switch for %T", v))
	}
}

// A uint64Pusher converts itself into the smallest possible representation in
// bytes.
type uint64Pusher uint64

func (p uint64Pusher) ToPush() []byte {
	if p == 0 {
		return []byte{0}
	}
	b := make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(p))
	return b[bits.LeadingZeros64(uint64(p))/8:]
}

type wordPusher uint256.Int

func (p wordPusher) ToPush() []byte {
	i := (*uint256.Int)(&p)
	if i.IsZero() {
		return []byte{0}
	}
	return i.Bytes()
}

type addressPusher common.Address

func (p addressPusher) ToPush() []byte { return p[:] }
